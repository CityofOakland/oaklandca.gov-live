{"version":3,"sources":["webpack:///./src/js/app.js"],"names":["document","addEventListener","readyState","selectNavs","getElementsByClassName","selectNav","e","window","location","href","target","value","Array","from","forEach","select","init","prototype","slice","call","querySelectorAll","accordion","allowMultiple","hasAttribute","allowToggle","triggers","event","classList","contains","isExpanded","getAttribute","active","querySelector","setAttribute","getElementById","removeAttribute","preventDefault","key","which","toString","ctrlModifier","ctrlKey","match","index","indexOf","direction","length","focus","trigger","add","remove","expanded"],"mappings":"iKAAA,2BAgBAA,SAASC,iBAAiB,oBAAoB,WAChB,aAAxBD,SAASE,YAdf,WACE,IAAMC,EAAaH,SAASI,uBAAuB,iBAMnD,SAASC,EAAUC,GACjBC,OAAOC,SAASC,KAAOH,EAAEI,OAAOC,MAN5BR,GACJS,MAAMC,KAAKV,GAAYW,SAAQ,SAAAC,GAC7BA,EAAOd,iBAAiB,SAAUI,MAWpCW,MAKJJ,MAAMK,UAAUC,MAAMC,KAAKnB,SAASoB,iBAAiB,eAAeN,SAAQ,SAAUO,GAGpF,IAAIC,EAAgBD,EAAUE,aAAa,uBAEvCC,EAAeF,GAAiCD,EAAUE,aAAa,qBAGvEE,EAAWb,MAAMK,UAAUC,MAAMC,KAAKE,EAAUD,iBAAiB,sBACxDR,MAAMK,UAAUC,MAAMC,KAAKE,EAAUD,iBAAiB,qBAyGnE,GAtGAC,EAAUpB,iBAAiB,SAAS,SAAUyB,GAC5C,IAAIhB,EAASgB,EAAMhB,OAEnB,GAAIA,EAAOiB,UAAUC,SAAS,oBAAqB,CAEjD,IAAIC,EAAqD,QAAxCnB,EAAOoB,aAAa,iBACjCC,EAASV,EAAUW,cAAc,2BAGhCV,GAAiBS,GAAUA,IAAWrB,IAEzCqB,EAAOE,aAAa,gBAAiB,SAErCjC,SAASkC,eAAeH,EAAOD,aAAa,kBAAkBG,aAAa,SAAU,IAGhFT,GACHO,EAAOI,gBAAgB,kBAItBN,EAWIL,GAAeK,IAEtBnB,EAAOuB,aAAa,gBAAiB,SAErCjC,SAASkC,eAAexB,EAAOoB,aAAa,kBAAkBG,aAAa,SAAU,MAbrFvB,EAAOuB,aAAa,gBAAiB,QAErCjC,SAASkC,eAAexB,EAAOoB,aAAa,kBAAkBK,gBAAgB,UAGzEX,GACHd,EAAOuB,aAAa,gBAAiB,SAUzCP,EAAMU,qBAKVf,EAAUpB,iBAAiB,WAAW,SAAUyB,GAC9C,IAAIhB,EAASgB,EAAMhB,OACf2B,EAAMX,EAAMY,MAAMC,WAMlBC,GAJa9B,EAAOoB,aAAa,iBAClBR,GAAiCD,EAAUE,aAAa,qBAGvDG,EAAMe,SAAWJ,EAAIK,MAAM,UAG/C,GAAIhC,EAAOiB,UAAUC,SAAS,oBAG5B,GAAIS,EAAIK,MAAM,UAAYF,EAAc,CACtC,IAAIG,EAAQlB,EAASmB,QAAQlC,GACzBmC,EAAaR,EAAIK,MAAM,SAAY,GAAK,EACxCI,EAASrB,EAASqB,OAGtBrB,GAFgBkB,EAAQG,EAASD,GAAaC,GAE3BC,QAEnBrB,EAAMU,sBAEH,GAAIC,EAAIK,MAAM,SAAU,CAE3B,OAAQL,GAEN,IAAK,KACHZ,EAAS,GAAGsB,QACZ,MAEF,IAAK,KACHtB,EAASA,EAASqB,OAAS,GAAGC,QAGlCrB,EAAMU,qBAQZf,EAAUD,iBAAiB,qBAAqBN,SAAQ,SAAUkC,GAEhEA,EAAQ/C,iBAAiB,SAAS,SAAUyB,GAC1CL,EAAUM,UAAUsB,IAAI,YAG1BD,EAAQ/C,iBAAiB,QAAQ,SAAUyB,GACzCL,EAAUM,UAAUuB,OAAO,gBAO1B1B,EAAa,CAEhB,IAAI2B,EAAW9B,EAAUW,cAAc,0BAGnCmB,GACFA,EAASlB,aAAa,gBAAiB,c","file":"/js/app.js","sourcesContent":["import 'alpinejs'\nimport 'picturefill'\n\nfunction init() {\n  const selectNavs = document.getElementsByClassName('js-select-nav');\n    if (selectNavs) {\n    Array.from(selectNavs).forEach(select => {\n      select.addEventListener(\"change\", selectNav);\n    });\n  }\n  function selectNav(e) {\n    window.location.href = e.target.value;\n  }\n}\n\n//Prevent the function to run before the document is loaded\ndocument.addEventListener(\"readystatechange\", function () {\n  if (document.readyState === \"complete\") {\n    init();\n  }\n});\n\n// Accordion\nArray.prototype.slice.call(document.querySelectorAll('.accordion')).forEach(function (accordion) {\n\n  // Allow for multiple accordion sections to be expanded at the same time\n  var allowMultiple = accordion.hasAttribute('data-allow-multiple');\n  // Allow for each toggle to both open and close individually\n  var allowToggle = (allowMultiple) ? allowMultiple : accordion.hasAttribute('data-allow-toggle');\n\n  // Create the array of toggle elements for the accordion group\n  var triggers = Array.prototype.slice.call(accordion.querySelectorAll('.accordion-header'));\n  var panels = Array.prototype.slice.call(accordion.querySelectorAll('.accordion-panel'));\n\n\n  accordion.addEventListener('click', function (event) {\n    var target = event.target;\n\n    if (target.classList.contains('accordion-header')) {\n      // Check if the current toggle is expanded.\n      var isExpanded = target.getAttribute('aria-expanded') == 'true';\n      var active = accordion.querySelector('[aria-expanded=\"true\"]');\n\n      // without allowMultiple, close the open accordion\n      if (!allowMultiple && active && active !== target) {\n        // Set the expanded state on the triggering element\n        active.setAttribute('aria-expanded', 'false');\n        // Hide the accordion sections, using aria-controls to specify the desired section\n        document.getElementById(active.getAttribute('aria-controls')).setAttribute('hidden', '');\n\n        // When toggling is not allowed, clean up disabled state\n        if (!allowToggle) {\n          active.removeAttribute('aria-disabled');\n        }\n      }\n\n      if (!isExpanded) {\n        // Set the expanded state on the triggering element\n        target.setAttribute('aria-expanded', 'true');\n        // Hide the accordion sections, using aria-controls to specify the desired section\n        document.getElementById(target.getAttribute('aria-controls')).removeAttribute('hidden');\n\n        // If toggling is not allowed, set disabled state on trigger\n        if (!allowToggle) {\n          target.setAttribute('aria-disabled', 'true');\n        }\n      }\n      else if (allowToggle && isExpanded) {\n        // Set the expanded state on the triggering element\n        target.setAttribute('aria-expanded', 'false');\n        // Hide the accordion sections, using aria-controls to specify the desired section\n        document.getElementById(target.getAttribute('aria-controls')).setAttribute('hidden', '');\n      }\n\n      event.preventDefault();\n    }\n  });\n\n  // Bind keyboard behaviors on the main accordion container\n  accordion.addEventListener('keydown', function (event) {\n    var target = event.target;\n    var key = event.which.toString();\n\n    var isExpanded = target.getAttribute('aria-expanded') == 'true';\n    var allowToggle = (allowMultiple) ? allowMultiple : accordion.hasAttribute('data-allow-toggle');\n\n    // 33 = Page Up, 34 = Page Down\n    var ctrlModifier = (event.ctrlKey && key.match(/33|34/));\n\n    // Is this coming from an accordion header?\n    if (target.classList.contains('accordion-header')) {\n      // Up/ Down arrow and Control + Page Up/ Page Down keyboard operations\n      // 38 = Up, 40 = Down\n      if (key.match(/38|40/) || ctrlModifier) {\n        var index = triggers.indexOf(target);\n        var direction = (key.match(/34|40/)) ? 1 : -1;\n        var length = triggers.length;\n        var newIndex = (index + length + direction) % length;\n\n        triggers[newIndex].focus();\n\n        event.preventDefault();\n      }\n      else if (key.match(/35|36/)) {\n        // 35 = End, 36 = Home keyboard operations\n        switch (key) {\n          // Go to first accordion\n          case '36':\n            triggers[0].focus();\n            break;\n            // Go to last accordion\n          case '35':\n            triggers[triggers.length - 1].focus();\n            break;\n        }\n        event.preventDefault();\n\n      }\n\n    }\n  });\n\n  // These are used to style the accordion when one of the buttons has focus\n  accordion.querySelectorAll('.accordion-header').forEach(function (trigger) {\n\n    trigger.addEventListener('focus', function (event) {\n      accordion.classList.add('focus');\n    });\n\n    trigger.addEventListener('blur', function (event) {\n      accordion.classList.remove('focus');\n    });\n\n  });\n\n  // Minor setup: will set disabled state, via aria-disabled, to an\n  // expanded/ active accordion which is not allowed to be toggled close\n  if (!allowToggle) {\n    // Get the first expanded/ active accordion\n    var expanded = accordion.querySelector('[aria-expanded=\"true\"]');\n\n    // If an expanded/ active accordion is found, disable\n    if (expanded) {\n      expanded.setAttribute('aria-disabled', 'true');\n    }\n  }\n\n});\n"],"sourceRoot":""}