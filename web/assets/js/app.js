(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["/js/app"],{

/***/ "./src/css/app.css":
/*!*************************!*\
  !*** ./src/css/app.css ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY3NzL2FwcC5jc3M/ZmI1NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9jc3MvYXBwLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/css/app.css\n");

/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// import 'alpinejs'\n// import 'picturefill'\nfunction init() {\n  var selectNavs = document.getElementsByClassName('js-select-nav');\n\n  if (selectNavs) {\n    Array.from(selectNavs).forEach(function (select) {\n      select.addEventListener(\"change\", selectNav);\n    });\n  }\n\n  function selectNav(e) {\n    window.location.href = e.target.value;\n  }\n} //Prevent the function to run before the document is loaded\n\n\ndocument.addEventListener(\"readystatechange\", function () {\n  if (document.readyState === \"complete\") {\n    init();\n  }\n}); // Accordion\n\nArray.prototype.slice.call(document.querySelectorAll('.accordion')).forEach(function (accordion) {\n  // Allow for multiple accordion sections to be expanded at the same time\n  var allowMultiple = accordion.hasAttribute('data-allow-multiple'); // Allow for each toggle to both open and close individually\n\n  var allowToggle = allowMultiple ? allowMultiple : accordion.hasAttribute('data-allow-toggle'); // Create the array of toggle elements for the accordion group\n\n  var triggers = Array.prototype.slice.call(accordion.querySelectorAll('.accordion-header'));\n  var panels = Array.prototype.slice.call(accordion.querySelectorAll('.accordion-panel'));\n  accordion.addEventListener('click', function (event) {\n    var target = event.target;\n\n    if (target.classList.contains('accordion-header')) {\n      // Check if the current toggle is expanded.\n      var isExpanded = target.getAttribute('aria-expanded') == 'true';\n      var active = accordion.querySelector('[aria-expanded=\"true\"]'); // without allowMultiple, close the open accordion\n\n      if (!allowMultiple && active && active !== target) {\n        // Set the expanded state on the triggering element\n        active.setAttribute('aria-expanded', 'false'); // Hide the accordion sections, using aria-controls to specify the desired section\n\n        document.getElementById(active.getAttribute('aria-controls')).setAttribute('hidden', ''); // When toggling is not allowed, clean up disabled state\n\n        if (!allowToggle) {\n          active.removeAttribute('aria-disabled');\n        }\n      }\n\n      if (!isExpanded) {\n        // Set the expanded state on the triggering element\n        target.setAttribute('aria-expanded', 'true'); // Hide the accordion sections, using aria-controls to specify the desired section\n\n        document.getElementById(target.getAttribute('aria-controls')).removeAttribute('hidden'); // If toggling is not allowed, set disabled state on trigger\n\n        if (!allowToggle) {\n          target.setAttribute('aria-disabled', 'true');\n        }\n      } else if (allowToggle && isExpanded) {\n        // Set the expanded state on the triggering element\n        target.setAttribute('aria-expanded', 'false'); // Hide the accordion sections, using aria-controls to specify the desired section\n\n        document.getElementById(target.getAttribute('aria-controls')).setAttribute('hidden', '');\n      }\n\n      event.preventDefault();\n    }\n  }); // Bind keyboard behaviors on the main accordion container\n\n  accordion.addEventListener('keydown', function (event) {\n    var target = event.target;\n    var key = event.which.toString();\n    var isExpanded = target.getAttribute('aria-expanded') == 'true';\n    var allowToggle = allowMultiple ? allowMultiple : accordion.hasAttribute('data-allow-toggle'); // 33 = Page Up, 34 = Page Down\n\n    var ctrlModifier = event.ctrlKey && key.match(/33|34/); // Is this coming from an accordion header?\n\n    if (target.classList.contains('accordion-header')) {\n      // Up/ Down arrow and Control + Page Up/ Page Down keyboard operations\n      // 38 = Up, 40 = Down\n      if (key.match(/38|40/) || ctrlModifier) {\n        var index = triggers.indexOf(target);\n        var direction = key.match(/34|40/) ? 1 : -1;\n        var length = triggers.length;\n        var newIndex = (index + length + direction) % length;\n        triggers[newIndex].focus();\n        event.preventDefault();\n      } else if (key.match(/35|36/)) {\n        // 35 = End, 36 = Home keyboard operations\n        switch (key) {\n          // Go to first accordion\n          case '36':\n            triggers[0].focus();\n            break;\n          // Go to last accordion\n\n          case '35':\n            triggers[triggers.length - 1].focus();\n            break;\n        }\n\n        event.preventDefault();\n      }\n    }\n  }); // These are used to style the accordion when one of the buttons has focus\n\n  accordion.querySelectorAll('.accordion-header').forEach(function (trigger) {\n    trigger.addEventListener('focus', function (event) {\n      accordion.classList.add('focus');\n    });\n    trigger.addEventListener('blur', function (event) {\n      accordion.classList.remove('focus');\n    });\n  }); // Minor setup: will set disabled state, via aria-disabled, to an\n  // expanded/ active accordion which is not allowed to be toggled close\n\n  if (!allowToggle) {\n    // Get the first expanded/ active accordion\n    var expanded = accordion.querySelector('[aria-expanded=\"true\"]'); // If an expanded/ active accordion is found, disable\n\n    if (expanded) {\n      expanded.setAttribute('aria-disabled', 'true');\n    }\n  }\n}); //Navigation\n\nvar menuItems = document.querySelectorAll('.has-submenu, #mobile-navigation');\nvar menuItemsHover = document.querySelectorAll('.has-submenu:not(.click)');\nvar menuItemsClick = document.querySelectorAll('.has-submenu.click > a, #mobile-navigation > a');\n\nfunction closeOtherMenuItems(parent) {\n  Array.prototype.forEach.call(menuItemsClick, function (el, i) {\n    if (parent) {\n      if (el !== document.querySelector(parent)) {\n        el.parentElement.classList.remove('open');\n        el.setAttribute('aria-expanded', \"false\");\n      }\n    } else {\n      el.parentElement.classList.remove('open');\n      el.setAttribute('aria-expanded', \"false\");\n    }\n  });\n} // Click\n\n\nArray.prototype.forEach.call(menuItemsClick, function (el, i) {\n  el.addEventListener(\"mousedown\", function (event) {\n    console.log(event);\n\n    if (this.parentElement.classList.contains('open')) {\n      this.parentElement.classList.remove('open');\n      el.setAttribute('aria-expanded', \"false\");\n      console.log(1);\n    } else {\n      closeOtherMenuItems(el.getAttribute('data-parent'));\n      this.parentElement.classList.add('open');\n      el.setAttribute('aria-expanded', \"true\");\n      console.log(2);\n    }\n  });\n}); // Hover\n\nArray.prototype.forEach.call(menuItemsHover, function (el, i) {\n  el.addEventListener(\"mouseover\", function (event) {\n    this.className = \"has-submenu open\";\n  });\n  el.addEventListener(\"mouseout\", function (event) {\n    document.querySelector(\".has-submenu.open\").className = \"has-submenu\";\n  });\n}); // Keyboard\n\nArray.prototype.forEach.call(menuItems, function (el, i) {\n  var trigger = el.querySelector('a[aria-expanded]');\n  var triggers = Array.prototype.slice.call(el.querySelectorAll('a.card, a.button, a.focusable, input, button'));\n  Array.prototype.forEach.call(triggers, function (innerTrigger, i) {\n    innerTrigger.addEventListener('blur', function (event) {\n      if (triggers.indexOf(event.relatedTarget) == -1) {\n        el.classList.remove('open');\n        trigger.setAttribute('aria-expanded', \"false\"); // event.stopPropagation();\n\n        console.log(3);\n      }\n    });\n  });\n  el.addEventListener('keydown', function (event) {\n    // var focused         = el.querySelector(':focus');\n    var target = event.target;\n    var key = event.which.toString();\n    var ctrlModifier = event.ctrlKey && key.match(/33|34/); // Press Enter\n\n    if (key == \"13\") {\n      if (trigger.getAttribute(\"aria-expanded\") == \"true\") {\n        el.classList.remove('open');\n        trigger.setAttribute('aria-expanded', \"false\");\n      } else {\n        trigger.setAttribute('aria-expanded', \"true\");\n        triggers[0].focus();\n\n        if (triggers[0].tagName == 'INPUT') {\n          event.preventDefault();\n        }\n      }\n\n      event.stopPropagation();\n    }\n\n    if (key.match(/38|40/) || ctrlModifier) {\n      var index = triggers.indexOf(target);\n      var direction = key.match(/34|40/) ? 1 : -1;\n      var length = triggers.length;\n      var newIndex = (index + length + direction) % length;\n\n      if (index == -1) {\n        triggers[0].focus();\n      } else if (direction == 1 && newIndex == 0) {\n        el.classList.remove('open');\n        trigger.setAttribute('aria-expanded', \"false\");\n        console.log(5);\n        trigger.focus();\n      } else if (direction == -1 && newIndex == length - 1) {\n        el.classList.remove('open');\n        trigger.setAttribute('aria-expanded', \"false\");\n        trigger.focus();\n      } else {\n        triggers[newIndex].focus();\n      }\n\n      event.preventDefault();\n    } else if (key.match(/35|36/)) {\n      switch (key) {\n        case '36':\n          triggers[0].focus();\n          break;\n\n        case '35':\n          triggers[triggers.length - 1].focus();\n          break;\n      }\n\n      event.preventDefault();\n    } // } else if( key === '9' && event.target.hasAttribute('aria-expanded')) {\n    //   var index = triggers.indexOf(target);\n    //   if(index == -1) {\n    //     console.log(target);\n    //     trigger.setAttribute('aria-expanded', \"false\");\n    //     console.log(6);\n    //   }\n    // }\n\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvYXBwLmpzPzkwZTkiXSwibmFtZXMiOlsiaW5pdCIsInNlbGVjdE5hdnMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJBcnJheSIsImZyb20iLCJmb3JFYWNoIiwic2VsZWN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInNlbGVjdE5hdiIsImUiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJ0YXJnZXQiLCJ2YWx1ZSIsInJlYWR5U3RhdGUiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWNjb3JkaW9uIiwiYWxsb3dNdWx0aXBsZSIsImhhc0F0dHJpYnV0ZSIsImFsbG93VG9nZ2xlIiwidHJpZ2dlcnMiLCJwYW5lbHMiLCJldmVudCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiaXNFeHBhbmRlZCIsImdldEF0dHJpYnV0ZSIsImFjdGl2ZSIsInF1ZXJ5U2VsZWN0b3IiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50QnlJZCIsInJlbW92ZUF0dHJpYnV0ZSIsInByZXZlbnREZWZhdWx0Iiwia2V5Iiwid2hpY2giLCJ0b1N0cmluZyIsImN0cmxNb2RpZmllciIsImN0cmxLZXkiLCJtYXRjaCIsImluZGV4IiwiaW5kZXhPZiIsImRpcmVjdGlvbiIsImxlbmd0aCIsIm5ld0luZGV4IiwiZm9jdXMiLCJ0cmlnZ2VyIiwiYWRkIiwicmVtb3ZlIiwiZXhwYW5kZWQiLCJtZW51SXRlbXMiLCJtZW51SXRlbXNIb3ZlciIsIm1lbnVJdGVtc0NsaWNrIiwiY2xvc2VPdGhlck1lbnVJdGVtcyIsInBhcmVudCIsImVsIiwiaSIsInBhcmVudEVsZW1lbnQiLCJjb25zb2xlIiwibG9nIiwiY2xhc3NOYW1lIiwiaW5uZXJUcmlnZ2VyIiwicmVsYXRlZFRhcmdldCIsInRhZ05hbWUiLCJzdG9wUHJvcGFnYXRpb24iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFFQSxTQUFTQSxJ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O0FBK0RILENBOUVEIiwiZmlsZSI6Ii4vc3JjL2pzL2FwcC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCAnYWxwaW5lanMnXG4vLyBpbXBvcnQgJ3BpY3R1cmVmaWxsJ1xuXG5mdW5jdGlvbiBpbml0KCkge1xuICBjb25zdCBzZWxlY3ROYXZzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnanMtc2VsZWN0LW5hdicpO1xuICAgIGlmIChzZWxlY3ROYXZzKSB7XG4gICAgQXJyYXkuZnJvbShzZWxlY3ROYXZzKS5mb3JFYWNoKHNlbGVjdCA9PiB7XG4gICAgICBzZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBzZWxlY3ROYXYpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHNlbGVjdE5hdihlKSB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBlLnRhcmdldC52YWx1ZTtcbiAgfVxufVxuXG4vL1ByZXZlbnQgdGhlIGZ1bmN0aW9uIHRvIHJ1biBiZWZvcmUgdGhlIGRvY3VtZW50IGlzIGxvYWRlZFxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgaW5pdCgpO1xuICB9XG59KTtcblxuLy8gQWNjb3JkaW9uXG5BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYWNjb3JkaW9uJykpLmZvckVhY2goZnVuY3Rpb24gKGFjY29yZGlvbikge1xuXG4gIC8vIEFsbG93IGZvciBtdWx0aXBsZSBhY2NvcmRpb24gc2VjdGlvbnMgdG8gYmUgZXhwYW5kZWQgYXQgdGhlIHNhbWUgdGltZVxuICB2YXIgYWxsb3dNdWx0aXBsZSA9IGFjY29yZGlvbi5oYXNBdHRyaWJ1dGUoJ2RhdGEtYWxsb3ctbXVsdGlwbGUnKTtcbiAgLy8gQWxsb3cgZm9yIGVhY2ggdG9nZ2xlIHRvIGJvdGggb3BlbiBhbmQgY2xvc2UgaW5kaXZpZHVhbGx5XG4gIHZhciBhbGxvd1RvZ2dsZSA9IChhbGxvd011bHRpcGxlKSA/IGFsbG93TXVsdGlwbGUgOiBhY2NvcmRpb24uaGFzQXR0cmlidXRlKCdkYXRhLWFsbG93LXRvZ2dsZScpO1xuXG4gIC8vIENyZWF0ZSB0aGUgYXJyYXkgb2YgdG9nZ2xlIGVsZW1lbnRzIGZvciB0aGUgYWNjb3JkaW9uIGdyb3VwXG4gIHZhciB0cmlnZ2VycyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFjY29yZGlvbi5xdWVyeVNlbGVjdG9yQWxsKCcuYWNjb3JkaW9uLWhlYWRlcicpKTtcbiAgdmFyIHBhbmVscyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFjY29yZGlvbi5xdWVyeVNlbGVjdG9yQWxsKCcuYWNjb3JkaW9uLXBhbmVsJykpO1xuXG5cbiAgYWNjb3JkaW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblxuICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY2NvcmRpb24taGVhZGVyJykpIHtcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBjdXJyZW50IHRvZ2dsZSBpcyBleHBhbmRlZC5cbiAgICAgIHZhciBpc0V4cGFuZGVkID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpID09ICd0cnVlJztcbiAgICAgIHZhciBhY3RpdmUgPSBhY2NvcmRpb24ucXVlcnlTZWxlY3RvcignW2FyaWEtZXhwYW5kZWQ9XCJ0cnVlXCJdJyk7XG5cbiAgICAgIC8vIHdpdGhvdXQgYWxsb3dNdWx0aXBsZSwgY2xvc2UgdGhlIG9wZW4gYWNjb3JkaW9uXG4gICAgICBpZiAoIWFsbG93TXVsdGlwbGUgJiYgYWN0aXZlICYmIGFjdGl2ZSAhPT0gdGFyZ2V0KSB7XG4gICAgICAgIC8vIFNldCB0aGUgZXhwYW5kZWQgc3RhdGUgb24gdGhlIHRyaWdnZXJpbmcgZWxlbWVudFxuICAgICAgICBhY3RpdmUuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgIC8vIEhpZGUgdGhlIGFjY29yZGlvbiBzZWN0aW9ucywgdXNpbmcgYXJpYS1jb250cm9scyB0byBzcGVjaWZ5IHRoZSBkZXNpcmVkIHNlY3Rpb25cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYWN0aXZlLmdldEF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycpKS5zZXRBdHRyaWJ1dGUoJ2hpZGRlbicsICcnKTtcblxuICAgICAgICAvLyBXaGVuIHRvZ2dsaW5nIGlzIG5vdCBhbGxvd2VkLCBjbGVhbiB1cCBkaXNhYmxlZCBzdGF0ZVxuICAgICAgICBpZiAoIWFsbG93VG9nZ2xlKSB7XG4gICAgICAgICAgYWN0aXZlLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNFeHBhbmRlZCkge1xuICAgICAgICAvLyBTZXQgdGhlIGV4cGFuZGVkIHN0YXRlIG9uIHRoZSB0cmlnZ2VyaW5nIGVsZW1lbnRcbiAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgICAgIC8vIEhpZGUgdGhlIGFjY29yZGlvbiBzZWN0aW9ucywgdXNpbmcgYXJpYS1jb250cm9scyB0byBzcGVjaWZ5IHRoZSBkZXNpcmVkIHNlY3Rpb25cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0LmdldEF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycpKS5yZW1vdmVBdHRyaWJ1dGUoJ2hpZGRlbicpO1xuXG4gICAgICAgIC8vIElmIHRvZ2dsaW5nIGlzIG5vdCBhbGxvd2VkLCBzZXQgZGlzYWJsZWQgc3RhdGUgb24gdHJpZ2dlclxuICAgICAgICBpZiAoIWFsbG93VG9nZ2xlKSB7XG4gICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGFsbG93VG9nZ2xlICYmIGlzRXhwYW5kZWQpIHtcbiAgICAgICAgLy8gU2V0IHRoZSBleHBhbmRlZCBzdGF0ZSBvbiB0aGUgdHJpZ2dlcmluZyBlbGVtZW50XG4gICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgLy8gSGlkZSB0aGUgYWNjb3JkaW9uIHNlY3Rpb25zLCB1c2luZyBhcmlhLWNvbnRyb2xzIHRvIHNwZWNpZnkgdGhlIGRlc2lyZWQgc2VjdGlvblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXQuZ2V0QXR0cmlidXRlKCdhcmlhLWNvbnRyb2xzJykpLnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJycpO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gQmluZCBrZXlib2FyZCBiZWhhdmlvcnMgb24gdGhlIG1haW4gYWNjb3JkaW9uIGNvbnRhaW5lclxuICBhY2NvcmRpb24uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgdmFyIGtleSA9IGV2ZW50LndoaWNoLnRvU3RyaW5nKCk7XG5cbiAgICB2YXIgaXNFeHBhbmRlZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKSA9PSAndHJ1ZSc7XG4gICAgdmFyIGFsbG93VG9nZ2xlID0gKGFsbG93TXVsdGlwbGUpID8gYWxsb3dNdWx0aXBsZSA6IGFjY29yZGlvbi5oYXNBdHRyaWJ1dGUoJ2RhdGEtYWxsb3ctdG9nZ2xlJyk7XG5cbiAgICAvLyAzMyA9IFBhZ2UgVXAsIDM0ID0gUGFnZSBEb3duXG4gICAgdmFyIGN0cmxNb2RpZmllciA9IChldmVudC5jdHJsS2V5ICYmIGtleS5tYXRjaCgvMzN8MzQvKSk7XG5cbiAgICAvLyBJcyB0aGlzIGNvbWluZyBmcm9tIGFuIGFjY29yZGlvbiBoZWFkZXI/XG4gICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjY29yZGlvbi1oZWFkZXInKSkge1xuICAgICAgLy8gVXAvIERvd24gYXJyb3cgYW5kIENvbnRyb2wgKyBQYWdlIFVwLyBQYWdlIERvd24ga2V5Ym9hcmQgb3BlcmF0aW9uc1xuICAgICAgLy8gMzggPSBVcCwgNDAgPSBEb3duXG4gICAgICBpZiAoa2V5Lm1hdGNoKC8zOHw0MC8pIHx8IGN0cmxNb2RpZmllcikge1xuICAgICAgICB2YXIgaW5kZXggPSB0cmlnZ2Vycy5pbmRleE9mKHRhcmdldCk7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSAoa2V5Lm1hdGNoKC8zNHw0MC8pKSA/IDEgOiAtMTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHRyaWdnZXJzLmxlbmd0aDtcbiAgICAgICAgdmFyIG5ld0luZGV4ID0gKGluZGV4ICsgbGVuZ3RoICsgZGlyZWN0aW9uKSAlIGxlbmd0aDtcblxuICAgICAgICB0cmlnZ2Vyc1tuZXdJbmRleF0uZm9jdXMoKTtcblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoa2V5Lm1hdGNoKC8zNXwzNi8pKSB7XG4gICAgICAgIC8vIDM1ID0gRW5kLCAzNiA9IEhvbWUga2V5Ym9hcmQgb3BlcmF0aW9uc1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgIC8vIEdvIHRvIGZpcnN0IGFjY29yZGlvblxuICAgICAgICAgIGNhc2UgJzM2JzpcbiAgICAgICAgICAgIHRyaWdnZXJzWzBdLmZvY3VzKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIEdvIHRvIGxhc3QgYWNjb3JkaW9uXG4gICAgICAgICAgY2FzZSAnMzUnOlxuICAgICAgICAgICAgdHJpZ2dlcnNbdHJpZ2dlcnMubGVuZ3RoIC0gMV0uZm9jdXMoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIH1cblxuICAgIH1cbiAgfSk7XG5cbiAgLy8gVGhlc2UgYXJlIHVzZWQgdG8gc3R5bGUgdGhlIGFjY29yZGlvbiB3aGVuIG9uZSBvZiB0aGUgYnV0dG9ucyBoYXMgZm9jdXNcbiAgYWNjb3JkaW9uLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hY2NvcmRpb24taGVhZGVyJykuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuXG4gICAgdHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgYWNjb3JkaW9uLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzJyk7XG4gICAgfSk7XG5cbiAgICB0cmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGFjY29yZGlvbi5jbGFzc0xpc3QucmVtb3ZlKCdmb2N1cycpO1xuICAgIH0pO1xuXG4gIH0pO1xuXG4gIC8vIE1pbm9yIHNldHVwOiB3aWxsIHNldCBkaXNhYmxlZCBzdGF0ZSwgdmlhIGFyaWEtZGlzYWJsZWQsIHRvIGFuXG4gIC8vIGV4cGFuZGVkLyBhY3RpdmUgYWNjb3JkaW9uIHdoaWNoIGlzIG5vdCBhbGxvd2VkIHRvIGJlIHRvZ2dsZWQgY2xvc2VcbiAgaWYgKCFhbGxvd1RvZ2dsZSkge1xuICAgIC8vIEdldCB0aGUgZmlyc3QgZXhwYW5kZWQvIGFjdGl2ZSBhY2NvcmRpb25cbiAgICB2YXIgZXhwYW5kZWQgPSBhY2NvcmRpb24ucXVlcnlTZWxlY3RvcignW2FyaWEtZXhwYW5kZWQ9XCJ0cnVlXCJdJyk7XG5cbiAgICAvLyBJZiBhbiBleHBhbmRlZC8gYWN0aXZlIGFjY29yZGlvbiBpcyBmb3VuZCwgZGlzYWJsZVxuICAgIGlmIChleHBhbmRlZCkge1xuICAgICAgZXhwYW5kZWQuc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICB9XG4gIH1cblxufSk7XG5cbi8vTmF2aWdhdGlvblxuXG52YXIgbWVudUl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmhhcy1zdWJtZW51LCAjbW9iaWxlLW5hdmlnYXRpb24nKTtcbnZhciBtZW51SXRlbXNIb3ZlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5oYXMtc3VibWVudTpub3QoLmNsaWNrKScpO1xudmFyIG1lbnVJdGVtc0NsaWNrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmhhcy1zdWJtZW51LmNsaWNrID4gYSwgI21vYmlsZS1uYXZpZ2F0aW9uID4gYScpO1xuXG5mdW5jdGlvbiBjbG9zZU90aGVyTWVudUl0ZW1zKHBhcmVudCl7XG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobWVudUl0ZW1zQ2xpY2ssIGZ1bmN0aW9uKGVsLCBpKXtcbiAgICBpZihwYXJlbnQpe1xuICAgICAgaWYoZWwgIT09IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocGFyZW50KSl7XG4gICAgICAgIGVsLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnb3BlbicpO1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBcImZhbHNlXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIFwiZmFsc2VcIik7XG4gICAgfVxuICB9KVxufVxuXG4vLyBDbGlja1xuQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChtZW51SXRlbXNDbGljaywgZnVuY3Rpb24oZWwsIGkpe1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24oZXZlbnQpe1xuXG4gICAgICBjb25zb2xlLmxvZyhldmVudCk7XG5cbiAgICAgIGlmKHRoaXMucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ29wZW4nKSl7XG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdvcGVuJyk7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIFwiZmFsc2VcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xvc2VPdGhlck1lbnVJdGVtcyhlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyZW50JykpO1xuICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnb3BlbicpO1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBcInRydWVcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKDIpO1xuICAgICAgfVxuICAgIH0pO1xufSk7XG5cbi8vIEhvdmVyXG5BcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG1lbnVJdGVtc0hvdmVyLCBmdW5jdGlvbihlbCwgaSl7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihldmVudCl7XG4gICAgICAgIHRoaXMuY2xhc3NOYW1lID0gXCJoYXMtc3VibWVudSBvcGVuXCI7XG4gICAgfSk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5oYXMtc3VibWVudS5vcGVuXCIpLmNsYXNzTmFtZSA9IFwiaGFzLXN1Ym1lbnVcIjtcbiAgICB9KTtcbn0pO1xuXG4vLyBLZXlib2FyZFxuQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChtZW51SXRlbXMsIGZ1bmN0aW9uKGVsLCBpKXtcbiAgICB2YXIgdHJpZ2dlciAgICAgPSBlbC5xdWVyeVNlbGVjdG9yKCdhW2FyaWEtZXhwYW5kZWRdJyk7XG4gICAgdmFyIHRyaWdnZXJzICAgID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgnYS5jYXJkLCBhLmJ1dHRvbiwgYS5mb2N1c2FibGUsIGlucHV0LCBidXR0b24nKSk7XG5cbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHRyaWdnZXJzLCBmdW5jdGlvbihpbm5lclRyaWdnZXIsIGkpe1xuICAgICAgICBpbm5lclRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgIGlmKHRyaWdnZXJzLmluZGV4T2YoZXZlbnQucmVsYXRlZFRhcmdldCkgPT0gLTEpe1xuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIFwiZmFsc2VcIik7XG4gICAgICAgICAgICAgICAgLy8gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pXG5cbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIHZhciBmb2N1c2VkICAgICAgICAgPSBlbC5xdWVyeVNlbGVjdG9yKCc6Zm9jdXMnKTtcbiAgICAgICAgdmFyIHRhcmdldCAgICAgICAgICA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgdmFyIGtleSAgICAgICAgICAgICA9IGV2ZW50LndoaWNoLnRvU3RyaW5nKCk7XG4gICAgICAgIHZhciBjdHJsTW9kaWZpZXIgICAgPSAoZXZlbnQuY3RybEtleSAmJiBrZXkubWF0Y2goLzMzfDM0LykpO1xuXG4gICAgICAgIC8vIFByZXNzIEVudGVyXG4gICAgICAgIGlmKGtleSA9PSBcIjEzXCIpe1xuICAgICAgICAgIGlmKHRyaWdnZXIuZ2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiKSA9PSBcInRydWVcIikge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnb3BlbicpO1xuICAgICAgICAgICAgdHJpZ2dlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBcImZhbHNlXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmlnZ2VyLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIFwidHJ1ZVwiKTtcbiAgICAgICAgICAgIHRyaWdnZXJzWzBdLmZvY3VzKCk7XG5cbiAgICAgICAgICAgIGlmKHRyaWdnZXJzWzBdLnRhZ05hbWUgPT0gJ0lOUFVUJykge1xuICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXkubWF0Y2goLzM4fDQwLykgfHwgY3RybE1vZGlmaWVyKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggICAgICAgPSB0cmlnZ2Vycy5pbmRleE9mKHRhcmdldCk7XG4gICAgICAgICAgICB2YXIgZGlyZWN0aW9uICAgPSAoa2V5Lm1hdGNoKC8zNHw0MC8pKSA/IDEgOiAtMTtcbiAgICAgICAgICAgIHZhciBsZW5ndGggICAgICA9IHRyaWdnZXJzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBuZXdJbmRleCAgICA9IChpbmRleCArIGxlbmd0aCArIGRpcmVjdGlvbikgJSBsZW5ndGg7XG5cbiAgICAgICAgICAgIGlmKGluZGV4ID09IC0xKSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlcnNbMF0uZm9jdXMoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZihkaXJlY3Rpb24gPT0gMSAmJiBuZXdJbmRleCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnb3BlbicpO1xuICAgICAgICAgICAgICAgIHRyaWdnZXIuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgXCJmYWxzZVwiKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyg1KTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyLmZvY3VzKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYoZGlyZWN0aW9uID09IC0xICYmIG5ld0luZGV4ID09IChsZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIFwiZmFsc2VcIik7XG4gICAgICAgICAgICAgICAgdHJpZ2dlci5mb2N1cygpO1xuICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0cmlnZ2Vyc1tuZXdJbmRleF0uZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5Lm1hdGNoKC8zNXwzNi8pKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgICBjYXNlICczNic6XG4gICAgICAgICAgICAgICAgdHJpZ2dlcnNbMF0uZm9jdXMoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnMzUnOlxuICAgICAgICAgICAgICAgIHRyaWdnZXJzW3RyaWdnZXJzLmxlbmd0aCAtIDFdLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIH0gZWxzZSBpZigga2V5ID09PSAnOScgJiYgZXZlbnQudGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpKSB7XG4gICAgICAgIC8vICAgdmFyIGluZGV4ID0gdHJpZ2dlcnMuaW5kZXhPZih0YXJnZXQpO1xuICAgICAgICAvLyAgIGlmKGluZGV4ID09IC0xKSB7XG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZyh0YXJnZXQpO1xuICAgICAgICAvLyAgICAgdHJpZ2dlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBcImZhbHNlXCIpO1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coNik7XG4gICAgICAgIC8vICAgfVxuICAgICAgICAvLyB9XG4gICAgfSk7XG59KVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/app.js\n");

/***/ }),

/***/ 0:
/*!***********************************************!*\
  !*** multi ./src/js/app.js ./src/css/app.css ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /Applications/MAMP/htdocs/oaklandca/src/js/app.js */"./src/js/app.js");
module.exports = __webpack_require__(/*! /Applications/MAMP/htdocs/oaklandca/src/css/app.css */"./src/css/app.css");


/***/ })

},[[0,"/js/manifest"]]]);