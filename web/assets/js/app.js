(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["/js/app"],{

/***/ "./src/css/app.css":
/*!*************************!*\
  !*** ./src/css/app.css ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY3NzL2FwcC5jc3M/ZmI1NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9jc3MvYXBwLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/css/app.css\n");

/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alpinejs */ \"./node_modules/alpinejs/dist/alpine.js\");\n/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alpinejs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var picturefill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! picturefill */ \"./node_modules/picturefill/dist/picturefill.js\");\n/* harmony import */ var picturefill__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(picturefill__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nfunction init() {\n  var selectNavs = document.getElementsByClassName('js-select-nav');\n\n  if (selectNavs) {\n    Array.from(selectNavs).forEach(function (select) {\n      select.addEventListener(\"change\", selectNav);\n    });\n  }\n\n  function selectNav(e) {\n    window.location.href = e.target.value;\n  }\n} //Prevent the function to run before the document is loaded\n\n\ndocument.addEventListener(\"readystatechange\", function () {\n  if (document.readyState === \"complete\") {\n    init();\n  }\n}); // Accordion\n\nArray.prototype.slice.call(document.querySelectorAll('.accordion')).forEach(function (accordion) {\n  // Allow for multiple accordion sections to be expanded at the same time\n  var allowMultiple = accordion.hasAttribute('data-allow-multiple'); // Allow for each toggle to both open and close individually\n\n  var allowToggle = allowMultiple ? allowMultiple : accordion.hasAttribute('data-allow-toggle'); // Create the array of toggle elements for the accordion group\n\n  var triggers = Array.prototype.slice.call(accordion.querySelectorAll('.accordion-header'));\n  var panels = Array.prototype.slice.call(accordion.querySelectorAll('.accordion-panel'));\n  accordion.addEventListener('click', function (event) {\n    var target = event.target;\n\n    if (target.classList.contains('accordion-header')) {\n      // Check if the current toggle is expanded.\n      var isExpanded = target.getAttribute('aria-expanded') == 'true';\n      var active = accordion.querySelector('[aria-expanded=\"true\"]'); // without allowMultiple, close the open accordion\n\n      if (!allowMultiple && active && active !== target) {\n        // Set the expanded state on the triggering element\n        active.setAttribute('aria-expanded', 'false'); // Hide the accordion sections, using aria-controls to specify the desired section\n\n        document.getElementById(active.getAttribute('aria-controls')).setAttribute('hidden', ''); // When toggling is not allowed, clean up disabled state\n\n        if (!allowToggle) {\n          active.removeAttribute('aria-disabled');\n        }\n      }\n\n      if (!isExpanded) {\n        // Set the expanded state on the triggering element\n        target.setAttribute('aria-expanded', 'true'); // Hide the accordion sections, using aria-controls to specify the desired section\n\n        document.getElementById(target.getAttribute('aria-controls')).removeAttribute('hidden'); // If toggling is not allowed, set disabled state on trigger\n\n        if (!allowToggle) {\n          target.setAttribute('aria-disabled', 'true');\n        }\n      } else if (allowToggle && isExpanded) {\n        // Set the expanded state on the triggering element\n        target.setAttribute('aria-expanded', 'false'); // Hide the accordion sections, using aria-controls to specify the desired section\n\n        document.getElementById(target.getAttribute('aria-controls')).setAttribute('hidden', '');\n      }\n\n      event.preventDefault();\n    }\n  }); // Bind keyboard behaviors on the main accordion container\n\n  accordion.addEventListener('keydown', function (event) {\n    var target = event.target;\n    var key = event.which.toString();\n    var isExpanded = target.getAttribute('aria-expanded') == 'true';\n    var allowToggle = allowMultiple ? allowMultiple : accordion.hasAttribute('data-allow-toggle'); // 33 = Page Up, 34 = Page Down\n\n    var ctrlModifier = event.ctrlKey && key.match(/33|34/); // Is this coming from an accordion header?\n\n    if (target.classList.contains('accordion-header')) {\n      // Up/ Down arrow and Control + Page Up/ Page Down keyboard operations\n      // 38 = Up, 40 = Down\n      if (key.match(/38|40/) || ctrlModifier) {\n        var index = triggers.indexOf(target);\n        var direction = key.match(/34|40/) ? 1 : -1;\n        var length = triggers.length;\n        var newIndex = (index + length + direction) % length;\n        triggers[newIndex].focus();\n        event.preventDefault();\n      } else if (key.match(/35|36/)) {\n        // 35 = End, 36 = Home keyboard operations\n        switch (key) {\n          // Go to first accordion\n          case '36':\n            triggers[0].focus();\n            break;\n          // Go to last accordion\n\n          case '35':\n            triggers[triggers.length - 1].focus();\n            break;\n        }\n\n        event.preventDefault();\n      }\n    }\n  }); // These are used to style the accordion when one of the buttons has focus\n\n  accordion.querySelectorAll('.accordion-header').forEach(function (trigger) {\n    trigger.addEventListener('focus', function (event) {\n      accordion.classList.add('focus');\n    });\n    trigger.addEventListener('blur', function (event) {\n      accordion.classList.remove('focus');\n    });\n  }); // Minor setup: will set disabled state, via aria-disabled, to an\n  // expanded/ active accordion which is not allowed to be toggled close\n\n  if (!allowToggle) {\n    // Get the first expanded/ active accordion\n    var expanded = accordion.querySelector('[aria-expanded=\"true\"]'); // If an expanded/ active accordion is found, disable\n\n    if (expanded) {\n      expanded.setAttribute('aria-disabled', 'true');\n    }\n  }\n}); //Navigation\n\nvar menuItems = document.querySelectorAll('.has-submenu, #mobile-navigation');\nvar menuItemsHover = document.querySelectorAll('.has-submenu:not(.click)');\nvar menuItemsClick = document.querySelectorAll('.has-submenu.click > a, #mobile-navigation > a');\n\nfunction closeOtherMenuItems(parent) {\n  Array.prototype.forEach.call(menuItemsClick, function (el, i) {\n    if (parent) {\n      if (el !== document.querySelector(parent)) {\n        el.parentElement.classList.remove('open');\n        el.setAttribute('aria-expanded', \"false\");\n      }\n    } else {\n      el.parentElement.classList.remove('open');\n      el.setAttribute('aria-expanded', \"false\");\n    }\n  });\n} // Click\n\n\nArray.prototype.forEach.call(menuItemsClick, function (el, i) {\n  el.addEventListener(\"mousedown\", function (event) {\n    if (this.parentElement.classList.contains('open')) {\n      this.parentElement.classList.remove('open');\n      el.setAttribute('aria-expanded', \"false\");\n    } else {\n      closeOtherMenuItems(el.getAttribute('data-parent'));\n      this.parentElement.classList.add('open');\n      el.setAttribute('aria-expanded', \"true\");\n    }\n  });\n}); // Hover\n\nArray.prototype.forEach.call(menuItemsHover, function (el, i) {\n  el.addEventListener(\"mouseover\", function (event) {\n    this.className = \"has-submenu open\";\n  });\n  el.addEventListener(\"mouseout\", function (event) {\n    document.querySelector(\".has-submenu.open\").className = \"has-submenu\";\n  });\n}); // Keyboard\n\nArray.prototype.forEach.call(menuItems, function (el, i) {\n  var trigger = el.querySelector('a[aria-expanded]');\n  var triggers = Array.prototype.slice.call(el.querySelectorAll('a.card, a.button, a.focusable, input, button'));\n  Array.prototype.forEach.call(triggers, function (innerTrigger, i) {\n    innerTrigger.addEventListener('blur', function (event) {\n      if (triggers.indexOf(event.relatedTarget) == -1) {\n        el.classList.remove('open');\n        trigger.setAttribute('aria-expanded', \"false\");\n      }\n    });\n  });\n  el.addEventListener('keydown', function (event) {\n    // var focused         = el.querySelector(':focus');\n    var target = event.target;\n    var key = event.which.toString();\n    var ctrlModifier = event.ctrlKey && key.match(/33|34/); // Press Enter\n\n    if (key == \"13\") {\n      if (trigger.getAttribute(\"aria-expanded\") == \"true\") {\n        el.classList.remove('open');\n        trigger.setAttribute('aria-expanded', \"false\");\n      } else {\n        trigger.setAttribute('aria-expanded', \"true\");\n        triggers[0].focus();\n\n        if (triggers[0].tagName == 'INPUT') {\n          event.preventDefault();\n        }\n      }\n\n      event.stopPropagation();\n    }\n\n    if (trigger.getAttribute('aria-expanded') == \"true\") {\n      if (key.match(/38|40/) || ctrlModifier) {\n        var index = triggers.indexOf(target);\n        var direction = key.match(/34|40/) ? 1 : -1;\n        var length = triggers.length;\n        var newIndex = (index + length + direction) % length;\n\n        if (index == -1) {\n          triggers[0].focus();\n        } else if (direction == 1 && newIndex == 0) {\n          el.classList.remove('open');\n          trigger.setAttribute('aria-expanded', \"false\");\n          trigger.focus();\n        } else if (direction == -1 && newIndex == length - 1) {\n          el.classList.remove('open');\n          trigger.setAttribute('aria-expanded', \"false\");\n          trigger.focus();\n        } else {\n          if (isVisible(triggers[newIndex])) {\n            triggers[newIndex].focus();\n            event.stopPropagation();\n          } else {\n            if (direction == 1) {\n              for (var i = newIndex; i < triggers.length; i++) {\n                if (isVisible(triggers[i])) {\n                  triggers[i].focus();\n                  break;\n                }\n\n                if (i == triggers.length - 1) {\n                  el.classList.remove('open');\n                  trigger.setAttribute('aria-expanded', \"false\");\n                  trigger.focus();\n                }\n              }\n            } else {\n              for (var i = newIndex; i >= 0; i--) {\n                if (isVisible(triggers[i])) {\n                  triggers[i].focus();\n                  break;\n                }\n\n                if (i == 0) {\n                  el.classList.remove('open');\n                  trigger.setAttribute('aria-expanded', \"false\");\n                  trigger.focus();\n                }\n              }\n            }\n          }\n        }\n\n        event.preventDefault();\n      } else if (key.match(/35|36/)) {\n        switch (key) {\n          case '36':\n            triggers[0].focus();\n            break;\n\n          case '35':\n            triggers[triggers.length - 1].focus();\n            break;\n        }\n\n        event.preventDefault();\n      }\n    }\n  });\n});\n\nfunction isVisible(elem) {\n  if (!(elem instanceof Element)) throw Error('DomUtil: elem is not an element.');\n  var style = getComputedStyle(elem);\n  if (style.display === 'none') return false;\n  if (style.visibility !== 'visible') return false;\n  if (style.opacity < 0.1) return false;\n\n  if (elem.offsetWidth + elem.offsetHeight + elem.getBoundingClientRect().height + elem.getBoundingClientRect().width === 0) {\n    return false;\n  }\n\n  var elemCenter = {\n    x: elem.getBoundingClientRect().left + elem.offsetWidth / 2,\n    y: elem.getBoundingClientRect().top + elem.offsetHeight / 2\n  };\n  if (elemCenter.x < 0) return false;\n  if (elemCenter.x > (document.documentElement.clientWidth || window.innerWidth)) return false;\n  if (elemCenter.y < 0) return false;\n  if (elemCenter.y > (document.documentElement.clientHeight || window.innerHeight)) return false;\n  var pointContainer = document.elementFromPoint(elemCenter.x, elemCenter.y);\n\n  do {\n    if (pointContainer === elem) return true;\n  } while (pointContainer = pointContainer.parentNode);\n\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvYXBwLmpzPzkwZTkiXSwibmFtZXMiOlsiaW5pdCIsInNlbGVjdE5hdnMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJBcnJheSIsImZyb20iLCJmb3JFYWNoIiwic2VsZWN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInNlbGVjdE5hdiIsImUiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJ0YXJnZXQiLCJ2YWx1ZSIsInJlYWR5U3RhdGUiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWNjb3JkaW9uIiwiYWxsb3dNdWx0aXBsZSIsImhhc0F0dHJpYnV0ZSIsImFsbG93VG9nZ2xlIiwidHJpZ2dlcnMiLCJwYW5lbHMiLCJldmVudCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiaXNFeHBhbmRlZCIsImdldEF0dHJpYnV0ZSIsImFjdGl2ZSIsInF1ZXJ5U2VsZWN0b3IiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50QnlJZCIsInJlbW92ZUF0dHJpYnV0ZSIsInByZXZlbnREZWZhdWx0Iiwia2V5Iiwid2hpY2giLCJ0b1N0cmluZyIsImN0cmxNb2RpZmllciIsImN0cmxLZXkiLCJtYXRjaCIsImluZGV4IiwiaW5kZXhPZiIsImRpcmVjdGlvbiIsImxlbmd0aCIsIm5ld0luZGV4IiwiZm9jdXMiLCJ0cmlnZ2VyIiwiYWRkIiwicmVtb3ZlIiwiZXhwYW5kZWQiLCJtZW51SXRlbXMiLCJtZW51SXRlbXNIb3ZlciIsIm1lbnVJdGVtc0NsaWNrIiwiY2xvc2VPdGhlck1lbnVJdGVtcyIsInBhcmVudCIsImVsIiwiaSIsInBhcmVudEVsZW1lbnQiLCJjbGFzc05hbWUiLCJpbm5lclRyaWdnZXIiLCJyZWxhdGVkVGFyZ2V0IiwidGFnTmFtZSIsInN0b3BQcm9wYWdhdGlvbiIsImlzVmlzaWJsZSIsImVsZW0iLCJFbGVtZW50IiwiRXJyb3IiLCJzdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJkaXNwbGF5IiwidmlzaWJpbGl0eSIsIm9wYWNpdHkiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImhlaWdodCIsIndpZHRoIiwiZWxlbUNlbnRlciIsIngiLCJsZWZ0IiwieSIsInRvcCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwiaW5uZXJXaWR0aCIsImNsaWVudEhlaWdodCIsImlubmVySGVpZ2h0IiwicG9pbnRDb250YWluZXIiLCJlbGVtZW50RnJvbVBvaW50IiwicGFyZW50Tm9kZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBRUEsU0FBU0EsSUFBVCxHQUFnQjtBQUNkLE1BQU1DLFVBQVUsR0FBR0MsUUFBUSxDQUFDQyxzQkFBVCxDQUFnQyxlQUFoQyxDQUFuQjs7QUFDRSxNQUFJRixVQUFKLEVBQWdCO0FBQ2hCRyxTQUFLLENBQUNDLElBQU4sQ0FBV0osVUFBWCxFQUF1QkssT0FBdkIsQ0FBK0IsVUFBQUMsTUFBTSxFQUFJO0FBQ3ZDQSxZQUFNLENBQUNDLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDQyxTQUFsQztBQUNELEtBRkQ7QUFHRDs7QUFDRCxXQUFTQSxTQUFULENBQW1CQyxDQUFuQixFQUFzQjtBQUNwQkMsVUFBTSxDQUFDQyxRQUFQLENBQWdCQyxJQUFoQixHQUF1QkgsQ0FBQyxDQUFDSSxNQUFGLENBQVNDLEtBQWhDO0FBQ0Q7QUFDRixDLENBRUQ7OztBQUNBYixRQUFRLENBQUNNLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxZQUFZO0FBQ3hELE1BQUlOLFFBQVEsQ0FBQ2MsVUFBVCxLQUF3QixVQUE1QixFQUF3QztBQUN0Q2hCLFFBQUk7QUFDTDtBQUNGLENBSkQsRSxDQU1BOztBQUNBSSxLQUFLLENBQUNhLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQmpCLFFBQVEsQ0FBQ2tCLGdCQUFULENBQTBCLFlBQTFCLENB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Q0FBWCxHQUFlLENBQW5CLEVBQXNCLE9BQU8sS0FBUDtBQUN0QixNQUFJRCxVQUFVLENBQUNDLENBQVgsSUFBZ0JoRixRQUFRLENBQUNvRixlQUFULENBQXlCQyxXQUF6QixJQUF3QzVFLE1BQU0sQ0FBQzZFLFVBQS9ELENBQUosRUFBZ0YsT0FBTyxLQUFQO0FBQ2hGLE1BQUlQLFVBQVUsQ0FBQ0csQ0FBWCxHQUFlLENBQW5CLEVBQXNCLE9BQU8sS0FBUDtBQUN0QixNQUFJSCxVQUFVLENBQUNHLENBQVgsSUFBZ0JsRixRQUFRLENBQUNvRixlQUFULENBQXlCRyxZQUF6QixJQUF5QzlFLE1BQU0sQ0FBQytFLFdBQWhFLENBQUosRUFBa0YsT0FBTyxLQUFQO0FBQ2xGLE1BQUlDLGNBQWMsR0FBR3pGLFFBQVEsQ0FBQzBGLGdCQUFULENBQTBCWCxVQUFVLENBQUNDLENBQXJDLEVBQXdDRCxVQUFVLENBQUNHLENBQW5ELENBQXJCOztBQUNBLEtBQUc7QUFDQyxRQUFJTyxjQUFjLEtBQUt2QixJQUF2QixFQUE2QixPQUFPLElBQVA7QUFDaEMsR0FGRCxRQUVTdUIsY0FBYyxHQUFHQSxjQUFjLENBQUNFLFVBRnpDOztBQUdBLFNBQU8sS0FBUDtBQUNIIiwiZmlsZSI6Ii4vc3JjL2pzL2FwcC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnYWxwaW5lanMnXG5pbXBvcnQgJ3BpY3R1cmVmaWxsJ1xuXG5mdW5jdGlvbiBpbml0KCkge1xuICBjb25zdCBzZWxlY3ROYXZzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnanMtc2VsZWN0LW5hdicpO1xuICAgIGlmIChzZWxlY3ROYXZzKSB7XG4gICAgQXJyYXkuZnJvbShzZWxlY3ROYXZzKS5mb3JFYWNoKHNlbGVjdCA9PiB7XG4gICAgICBzZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBzZWxlY3ROYXYpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHNlbGVjdE5hdihlKSB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBlLnRhcmdldC52YWx1ZTtcbiAgfVxufVxuXG4vL1ByZXZlbnQgdGhlIGZ1bmN0aW9uIHRvIHJ1biBiZWZvcmUgdGhlIGRvY3VtZW50IGlzIGxvYWRlZFxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgaW5pdCgpO1xuICB9XG59KTtcblxuLy8gQWNjb3JkaW9uXG5BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYWNjb3JkaW9uJykpLmZvckVhY2goZnVuY3Rpb24gKGFjY29yZGlvbikge1xuXG4gIC8vIEFsbG93IGZvciBtdWx0aXBsZSBhY2NvcmRpb24gc2VjdGlvbnMgdG8gYmUgZXhwYW5kZWQgYXQgdGhlIHNhbWUgdGltZVxuICB2YXIgYWxsb3dNdWx0aXBsZSA9IGFjY29yZGlvbi5oYXNBdHRyaWJ1dGUoJ2RhdGEtYWxsb3ctbXVsdGlwbGUnKTtcbiAgLy8gQWxsb3cgZm9yIGVhY2ggdG9nZ2xlIHRvIGJvdGggb3BlbiBhbmQgY2xvc2UgaW5kaXZpZHVhbGx5XG4gIHZhciBhbGxvd1RvZ2dsZSA9IChhbGxvd011bHRpcGxlKSA/IGFsbG93TXVsdGlwbGUgOiBhY2NvcmRpb24uaGFzQXR0cmlidXRlKCdkYXRhLWFsbG93LXRvZ2dsZScpO1xuXG4gIC8vIENyZWF0ZSB0aGUgYXJyYXkgb2YgdG9nZ2xlIGVsZW1lbnRzIGZvciB0aGUgYWNjb3JkaW9uIGdyb3VwXG4gIHZhciB0cmlnZ2VycyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFjY29yZGlvbi5xdWVyeVNlbGVjdG9yQWxsKCcuYWNjb3JkaW9uLWhlYWRlcicpKTtcbiAgdmFyIHBhbmVscyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFjY29yZGlvbi5xdWVyeVNlbGVjdG9yQWxsKCcuYWNjb3JkaW9uLXBhbmVsJykpO1xuXG5cbiAgYWNjb3JkaW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblxuICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY2NvcmRpb24taGVhZGVyJykpIHtcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBjdXJyZW50IHRvZ2dsZSBpcyBleHBhbmRlZC5cbiAgICAgIHZhciBpc0V4cGFuZGVkID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpID09ICd0cnVlJztcbiAgICAgIHZhciBhY3RpdmUgPSBhY2NvcmRpb24ucXVlcnlTZWxlY3RvcignW2FyaWEtZXhwYW5kZWQ9XCJ0cnVlXCJdJyk7XG5cbiAgICAgIC8vIHdpdGhvdXQgYWxsb3dNdWx0aXBsZSwgY2xvc2UgdGhlIG9wZW4gYWNjb3JkaW9uXG4gICAgICBpZiAoIWFsbG93TXVsdGlwbGUgJiYgYWN0aXZlICYmIGFjdGl2ZSAhPT0gdGFyZ2V0KSB7XG4gICAgICAgIC8vIFNldCB0aGUgZXhwYW5kZWQgc3RhdGUgb24gdGhlIHRyaWdnZXJpbmcgZWxlbWVudFxuICAgICAgICBhY3RpdmUuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgIC8vIEhpZGUgdGhlIGFjY29yZGlvbiBzZWN0aW9ucywgdXNpbmcgYXJpYS1jb250cm9scyB0byBzcGVjaWZ5IHRoZSBkZXNpcmVkIHNlY3Rpb25cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYWN0aXZlLmdldEF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycpKS5zZXRBdHRyaWJ1dGUoJ2hpZGRlbicsICcnKTtcblxuICAgICAgICAvLyBXaGVuIHRvZ2dsaW5nIGlzIG5vdCBhbGxvd2VkLCBjbGVhbiB1cCBkaXNhYmxlZCBzdGF0ZVxuICAgICAgICBpZiAoIWFsbG93VG9nZ2xlKSB7XG4gICAgICAgICAgYWN0aXZlLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNFeHBhbmRlZCkge1xuICAgICAgICAvLyBTZXQgdGhlIGV4cGFuZGVkIHN0YXRlIG9uIHRoZSB0cmlnZ2VyaW5nIGVsZW1lbnRcbiAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgICAgIC8vIEhpZGUgdGhlIGFjY29yZGlvbiBzZWN0aW9ucywgdXNpbmcgYXJpYS1jb250cm9scyB0byBzcGVjaWZ5IHRoZSBkZXNpcmVkIHNlY3Rpb25cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0LmdldEF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycpKS5yZW1vdmVBdHRyaWJ1dGUoJ2hpZGRlbicpO1xuXG4gICAgICAgIC8vIElmIHRvZ2dsaW5nIGlzIG5vdCBhbGxvd2VkLCBzZXQgZGlzYWJsZWQgc3RhdGUgb24gdHJpZ2dlclxuICAgICAgICBpZiAoIWFsbG93VG9nZ2xlKSB7XG4gICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGFsbG93VG9nZ2xlICYmIGlzRXhwYW5kZWQpIHtcbiAgICAgICAgLy8gU2V0IHRoZSBleHBhbmRlZCBzdGF0ZSBvbiB0aGUgdHJpZ2dlcmluZyBlbGVtZW50XG4gICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgLy8gSGlkZSB0aGUgYWNjb3JkaW9uIHNlY3Rpb25zLCB1c2luZyBhcmlhLWNvbnRyb2xzIHRvIHNwZWNpZnkgdGhlIGRlc2lyZWQgc2VjdGlvblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXQuZ2V0QXR0cmlidXRlKCdhcmlhLWNvbnRyb2xzJykpLnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJycpO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gQmluZCBrZXlib2FyZCBiZWhhdmlvcnMgb24gdGhlIG1haW4gYWNjb3JkaW9uIGNvbnRhaW5lclxuICBhY2NvcmRpb24uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgdmFyIGtleSA9IGV2ZW50LndoaWNoLnRvU3RyaW5nKCk7XG5cbiAgICB2YXIgaXNFeHBhbmRlZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKSA9PSAndHJ1ZSc7XG4gICAgdmFyIGFsbG93VG9nZ2xlID0gKGFsbG93TXVsdGlwbGUpID8gYWxsb3dNdWx0aXBsZSA6IGFjY29yZGlvbi5oYXNBdHRyaWJ1dGUoJ2RhdGEtYWxsb3ctdG9nZ2xlJyk7XG5cbiAgICAvLyAzMyA9IFBhZ2UgVXAsIDM0ID0gUGFnZSBEb3duXG4gICAgdmFyIGN0cmxNb2RpZmllciA9IChldmVudC5jdHJsS2V5ICYmIGtleS5tYXRjaCgvMzN8MzQvKSk7XG5cbiAgICAvLyBJcyB0aGlzIGNvbWluZyBmcm9tIGFuIGFjY29yZGlvbiBoZWFkZXI/XG4gICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjY29yZGlvbi1oZWFkZXInKSkge1xuICAgICAgLy8gVXAvIERvd24gYXJyb3cgYW5kIENvbnRyb2wgKyBQYWdlIFVwLyBQYWdlIERvd24ga2V5Ym9hcmQgb3BlcmF0aW9uc1xuICAgICAgLy8gMzggPSBVcCwgNDAgPSBEb3duXG4gICAgICBpZiAoa2V5Lm1hdGNoKC8zOHw0MC8pIHx8IGN0cmxNb2RpZmllcikge1xuICAgICAgICB2YXIgaW5kZXggPSB0cmlnZ2Vycy5pbmRleE9mKHRhcmdldCk7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSAoa2V5Lm1hdGNoKC8zNHw0MC8pKSA/IDEgOiAtMTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHRyaWdnZXJzLmxlbmd0aDtcbiAgICAgICAgdmFyIG5ld0luZGV4ID0gKGluZGV4ICsgbGVuZ3RoICsgZGlyZWN0aW9uKSAlIGxlbmd0aDtcblxuICAgICAgICB0cmlnZ2Vyc1tuZXdJbmRleF0uZm9jdXMoKTtcblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoa2V5Lm1hdGNoKC8zNXwzNi8pKSB7XG4gICAgICAgIC8vIDM1ID0gRW5kLCAzNiA9IEhvbWUga2V5Ym9hcmQgb3BlcmF0aW9uc1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgIC8vIEdvIHRvIGZpcnN0IGFjY29yZGlvblxuICAgICAgICAgIGNhc2UgJzM2JzpcbiAgICAgICAgICAgIHRyaWdnZXJzWzBdLmZvY3VzKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIEdvIHRvIGxhc3QgYWNjb3JkaW9uXG4gICAgICAgICAgY2FzZSAnMzUnOlxuICAgICAgICAgICAgdHJpZ2dlcnNbdHJpZ2dlcnMubGVuZ3RoIC0gMV0uZm9jdXMoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIH1cblxuICAgIH1cbiAgfSk7XG5cbiAgLy8gVGhlc2UgYXJlIHVzZWQgdG8gc3R5bGUgdGhlIGFjY29yZGlvbiB3aGVuIG9uZSBvZiB0aGUgYnV0dG9ucyBoYXMgZm9jdXNcbiAgYWNjb3JkaW9uLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hY2NvcmRpb24taGVhZGVyJykuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuXG4gICAgdHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgYWNjb3JkaW9uLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzJyk7XG4gICAgfSk7XG5cbiAgICB0cmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGFjY29yZGlvbi5jbGFzc0xpc3QucmVtb3ZlKCdmb2N1cycpO1xuICAgIH0pO1xuXG4gIH0pO1xuXG4gIC8vIE1pbm9yIHNldHVwOiB3aWxsIHNldCBkaXNhYmxlZCBzdGF0ZSwgdmlhIGFyaWEtZGlzYWJsZWQsIHRvIGFuXG4gIC8vIGV4cGFuZGVkLyBhY3RpdmUgYWNjb3JkaW9uIHdoaWNoIGlzIG5vdCBhbGxvd2VkIHRvIGJlIHRvZ2dsZWQgY2xvc2VcbiAgaWYgKCFhbGxvd1RvZ2dsZSkge1xuICAgIC8vIEdldCB0aGUgZmlyc3QgZXhwYW5kZWQvIGFjdGl2ZSBhY2NvcmRpb25cbiAgICB2YXIgZXhwYW5kZWQgPSBhY2NvcmRpb24ucXVlcnlTZWxlY3RvcignW2FyaWEtZXhwYW5kZWQ9XCJ0cnVlXCJdJyk7XG5cbiAgICAvLyBJZiBhbiBleHBhbmRlZC8gYWN0aXZlIGFjY29yZGlvbiBpcyBmb3VuZCwgZGlzYWJsZVxuICAgIGlmIChleHBhbmRlZCkge1xuICAgICAgZXhwYW5kZWQuc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICB9XG4gIH1cblxufSk7XG5cbi8vTmF2aWdhdGlvblxuXG52YXIgbWVudUl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmhhcy1zdWJtZW51LCAjbW9iaWxlLW5hdmlnYXRpb24nKTtcbnZhciBtZW51SXRlbXNIb3ZlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5oYXMtc3VibWVudTpub3QoLmNsaWNrKScpO1xudmFyIG1lbnVJdGVtc0NsaWNrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmhhcy1zdWJtZW51LmNsaWNrID4gYSwgI21vYmlsZS1uYXZpZ2F0aW9uID4gYScpO1xuXG5mdW5jdGlvbiBjbG9zZU90aGVyTWVudUl0ZW1zKHBhcmVudCl7XG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobWVudUl0ZW1zQ2xpY2ssIGZ1bmN0aW9uKGVsLCBpKXtcbiAgICBpZihwYXJlbnQpe1xuICAgICAgaWYoZWwgIT09IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocGFyZW50KSl7XG4gICAgICAgIGVsLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnb3BlbicpO1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBcImZhbHNlXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIFwiZmFsc2VcIik7XG4gICAgfVxuICB9KVxufVxuXG4vLyBDbGlja1xuQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChtZW51SXRlbXNDbGljaywgZnVuY3Rpb24oZWwsIGkpe1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgaWYodGhpcy5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnb3BlbicpKXtcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgXCJmYWxzZVwiKTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xvc2VPdGhlck1lbnVJdGVtcyhlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyZW50JykpO1xuICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnb3BlbicpO1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBcInRydWVcIik7XG5cbiAgICAgIH1cbiAgICB9KTtcbn0pO1xuXG4vLyBIb3ZlclxuQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChtZW51SXRlbXNIb3ZlciwgZnVuY3Rpb24oZWwsIGkpe1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IFwiaGFzLXN1Ym1lbnUgb3BlblwiO1xuICAgIH0pO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW91dFwiLCBmdW5jdGlvbihldmVudCl7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaGFzLXN1Ym1lbnUub3BlblwiKS5jbGFzc05hbWUgPSBcImhhcy1zdWJtZW51XCI7XG4gICAgfSk7XG59KTtcblxuLy8gS2V5Ym9hcmRcbkFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobWVudUl0ZW1zLCBmdW5jdGlvbihlbCwgaSl7XG4gICAgdmFyIHRyaWdnZXIgICAgID0gZWwucXVlcnlTZWxlY3RvcignYVthcmlhLWV4cGFuZGVkXScpO1xuICAgIHZhciB0cmlnZ2VycyAgICA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2EuY2FyZCwgYS5idXR0b24sIGEuZm9jdXNhYmxlLCBpbnB1dCwgYnV0dG9uJykpO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCh0cmlnZ2VycywgZnVuY3Rpb24oaW5uZXJUcmlnZ2VyLCBpKXtcbiAgICAgICAgaW5uZXJUcmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICBpZih0cmlnZ2Vycy5pbmRleE9mKGV2ZW50LnJlbGF0ZWRUYXJnZXQpID09IC0xKXtcbiAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdvcGVuJyk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBcImZhbHNlXCIpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pXG5cbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIHZhciBmb2N1c2VkICAgICAgICAgPSBlbC5xdWVyeVNlbGVjdG9yKCc6Zm9jdXMnKTtcbiAgICAgICAgdmFyIHRhcmdldCAgICAgICAgICA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgdmFyIGtleSAgICAgICAgICAgICA9IGV2ZW50LndoaWNoLnRvU3RyaW5nKCk7XG4gICAgICAgIHZhciBjdHJsTW9kaWZpZXIgICAgPSAoZXZlbnQuY3RybEtleSAmJiBrZXkubWF0Y2goLzMzfDM0LykpO1xuXG4gICAgICAgIC8vIFByZXNzIEVudGVyXG4gICAgICAgIGlmKGtleSA9PSBcIjEzXCIpe1xuICAgICAgICAgIGlmKHRyaWdnZXIuZ2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiKSA9PSBcInRydWVcIikge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnb3BlbicpO1xuICAgICAgICAgICAgdHJpZ2dlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBcImZhbHNlXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmlnZ2VyLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIFwidHJ1ZVwiKTtcbiAgICAgICAgICAgIHRyaWdnZXJzWzBdLmZvY3VzKCk7XG5cbiAgICAgICAgICAgIGlmKHRyaWdnZXJzWzBdLnRhZ05hbWUgPT0gJ0lOUFVUJykge1xuICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRyaWdnZXIuZ2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJykgPT0gXCJ0cnVlXCIpe1xuICAgICAgICAgIGlmIChrZXkubWF0Y2goLzM4fDQwLykgfHwgY3RybE1vZGlmaWVyKSB7XG4gICAgICAgICAgICAgIHZhciBpbmRleCAgICAgICA9IHRyaWdnZXJzLmluZGV4T2YodGFyZ2V0KTtcbiAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiAgID0gKGtleS5tYXRjaCgvMzR8NDAvKSkgPyAxIDogLTE7XG4gICAgICAgICAgICAgIHZhciBsZW5ndGggICAgICA9IHRyaWdnZXJzLmxlbmd0aDtcbiAgICAgICAgICAgICAgdmFyIG5ld0luZGV4ICAgID0gKGluZGV4ICsgbGVuZ3RoICsgZGlyZWN0aW9uKSAlIGxlbmd0aDtcblxuICAgICAgICAgICAgICBpZihpbmRleCA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgdHJpZ2dlcnNbMF0uZm9jdXMoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmKGRpcmVjdGlvbiA9PSAxICYmIG5ld0luZGV4ID09IDApIHtcbiAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcbiAgICAgICAgICAgICAgICAgIHRyaWdnZXIuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgXCJmYWxzZVwiKTtcbiAgICAgICAgICAgICAgICAgIHRyaWdnZXIuZm9jdXMoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmKGRpcmVjdGlvbiA9PSAtMSAmJiBuZXdJbmRleCA9PSAobGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcbiAgICAgICAgICAgICAgICAgIHRyaWdnZXIuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgXCJmYWxzZVwiKTtcbiAgICAgICAgICAgICAgICAgIHRyaWdnZXIuZm9jdXMoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIGlmKGlzVmlzaWJsZSh0cmlnZ2Vyc1tuZXdJbmRleF0pKXtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcnNbbmV3SW5kZXhdLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoZGlyZWN0aW9uID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSBuZXdJbmRleDsgaSA8IHRyaWdnZXJzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlzVmlzaWJsZSh0cmlnZ2Vyc1tpXSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2Vyc1tpXS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaSA9PSB0cmlnZ2Vycy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBcImZhbHNlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IG5ld0luZGV4OyBpID49IDA7IGktLSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpc1Zpc2libGUodHJpZ2dlcnNbaV0pKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcnNbaV0uZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGkgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdvcGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgXCJmYWxzZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlci5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChrZXkubWF0Y2goLzM1fDM2LykpIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICczNic6XG4gICAgICAgICAgICAgICAgICB0cmlnZ2Vyc1swXS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnMzUnOlxuICAgICAgICAgICAgICAgICAgdHJpZ2dlcnNbdHJpZ2dlcnMubGVuZ3RoIC0gMV0uZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59KVxuXG5mdW5jdGlvbiBpc1Zpc2libGUoZWxlbSkge1xuICAgIGlmICghKGVsZW0gaW5zdGFuY2VvZiBFbGVtZW50KSkgdGhyb3cgRXJyb3IoJ0RvbVV0aWw6IGVsZW0gaXMgbm90IGFuIGVsZW1lbnQuJyk7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW0pO1xuICAgIGlmIChzdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoc3R5bGUudmlzaWJpbGl0eSAhPT0gJ3Zpc2libGUnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHN0eWxlLm9wYWNpdHkgPCAwLjEpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZWxlbS5vZmZzZXRXaWR0aCArIGVsZW0ub2Zmc2V0SGVpZ2h0ICsgZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgK1xuICAgICAgICBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZWxlbUNlbnRlciAgID0ge1xuICAgICAgICB4OiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgKyBlbGVtLm9mZnNldFdpZHRoIC8gMixcbiAgICAgICAgeTogZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyBlbGVtLm9mZnNldEhlaWdodCAvIDJcbiAgICB9O1xuICAgIGlmIChlbGVtQ2VudGVyLnggPCAwKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGVsZW1DZW50ZXIueCA+IChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggfHwgd2luZG93LmlubmVyV2lkdGgpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGVsZW1DZW50ZXIueSA8IDApIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZWxlbUNlbnRlci55ID4gKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgfHwgd2luZG93LmlubmVySGVpZ2h0KSkgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBwb2ludENvbnRhaW5lciA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoZWxlbUNlbnRlci54LCBlbGVtQ2VudGVyLnkpO1xuICAgIGRvIHtcbiAgICAgICAgaWYgKHBvaW50Q29udGFpbmVyID09PSBlbGVtKSByZXR1cm4gdHJ1ZTtcbiAgICB9IHdoaWxlIChwb2ludENvbnRhaW5lciA9IHBvaW50Q29udGFpbmVyLnBhcmVudE5vZGUpO1xuICAgIHJldHVybiBmYWxzZTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/app.js\n");

/***/ }),

/***/ 0:
/*!***********************************************!*\
  !*** multi ./src/js/app.js ./src/css/app.css ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /Applications/MAMP/htdocs/oaklandca/src/js/app.js */"./src/js/app.js");
module.exports = __webpack_require__(/*! /Applications/MAMP/htdocs/oaklandca/src/css/app.css */"./src/css/app.css");


/***/ })

},[[0,"/js/manifest","/js/vendor"]]]);