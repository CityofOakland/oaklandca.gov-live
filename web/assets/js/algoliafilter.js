(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["/js/algoliafilter"],{

/***/ "./src/js/algoliafilter.js":
/*!*********************************!*\
  !*** ./src/js/algoliafilter.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar filterReveal = document.getElementById(\"filter-reveal\");\nvar filters = document.getElementById(\"algolia-filters\");\nvar openClasses = [\"opacity-100\", \"h-auto\", \"z-40\", \"visible\"];\nvar closedClasses = [\"opacity-0\", \"h-0\", \"z-neg-10\", \"invisible\"];\n\nif (filterReveal != null) {\n  filterReveal.addEventListener(\"click\", function (e) {\n    e.preventDefault();\n\n    if (filters.classList.contains(\"opacity-0\")) {\n      var _filters$classList, _filters$classList2;\n\n      (_filters$classList = filters.classList).add.apply(_filters$classList, openClasses);\n\n      (_filters$classList2 = filters.classList).remove.apply(_filters$classList2, closedClasses);\n\n      filterReveal.innerHTML = \"Hide Filters\";\n    } else {\n      var _filters$classList3, _filters$classList4;\n\n      (_filters$classList3 = filters.classList).add.apply(_filters$classList3, closedClasses);\n\n      (_filters$classList4 = filters.classList).remove.apply(_filters$classList4, openClasses);\n\n      filterReveal.innerHTML = \"Show Filters\";\n    }\n  }, false);\n}\n\nif (window.section && window.entryTitle) {\n  var filtered = \"\".concat(window.section, \":'\").concat(window.entryTitle, \"'\");\n}\n\nvar ts = Math.round(new Date().getTime() / 1000);\nvar search = instantsearch({\n  appId: \"6V5VJO8ZG2\",\n  apiKey: \"9bded46d3070b2089499c70b2389708b\",\n  indexName: window.algoliaIndex,\n  routing: true,\n  searchParameters: {\n    filters: filtered || undefined,\n    highlightPreTag: '<b class=\"font-bold\">',\n    highlightPostTag: '</b>',\n    snippetEllipsisText: \"â€¦\"\n  }\n});\nsearch.addWidget(instantsearch.widgets.analytics({\n  pushFunction: function pushFunction(formattedParameters, state, results) {\n    window.ga('set', 'page', window.location.pathname + window.location.search);\n    window.ga('send', 'pageView');\n  }\n}));\nvar defaultTemplate = \"<article class=\\\"py-8 sm:py-12 border-gray-300 border-b-2\\\">\\n  {{#displayDate}}\\n  <div class=\\\"text-base text-gray-400 mb-4\\\">\\n    Publish Date: <b>{{ displayDate }}</b>\\n  </div>\\n  {{/displayDate}}\\n  <h2 class=\\\"text-xl md:text-2xl my-0 {{#leadIn}} mt-0 mb-3 md:mb-6 {{/leadIn}}\\\">\\n    <a href=\\\"{{ url }}\\\">\\n      {{{ _highlightResult.title.value }}}\\n    </a>\\n  </h2>\\n  {{#leadIn}}\\n    <p class=\\\"text-base text-gray-700 md:text-lg my-2 md:my-4\\\">\\n      {{{ _highlightResult.leadIn.value }}}\\n    </p>\\n  {{/leadIn}}\\n</article>\";\nfacetFilters.forEach(function (facet) {\n  search.addWidget(instantsearch.widgets.menuSelect({\n    container: facet.container,\n    attributeName: facet.attribute,\n    operator: 'or',\n    limit: 10,\n    templates: {\n      header: facet.header\n    }\n  }));\n});\n\nif (typeof moment !== 'undefined') {\n  var ONE_DAY_IN_MS = 3600 * 24 * 1000;\n  var TODAY = moment().format('L');\n  var datePicker = instantsearch.connectors.connectRange(function (options, isFirstRendering) {\n    if (!isFirstRendering) return;\n    var refine = options.refine;\n    var MONTHSTART = new Date(moment().startOf('month')).getTime();\n    var MONTHEND = new Date(moment().endOf('month')).getTime();\n    refine([MONTHSTART, MONTHEND]);\n    new Calendar({\n      element: $('#calendar'),\n      same_day_range: true,\n      start_date: moment().startOf('month'),\n      end_date: moment().add(11, 'month').endOf('month'),\n      presets: [{\n        label: 'This month',\n        start: moment().startOf('month'),\n        end: moment().endOf('month')\n      }, {\n        label: 'Next month',\n        start: moment().add(1, 'month').startOf('month'),\n        end: moment().add(1, 'month').endOf('month')\n      }, {\n        label: 'Last month',\n        start: moment().subtract(1, 'month').startOf('month'),\n        end: moment().subtract(1, 'month').endOf('month')\n      }, {\n        label: 'Last year',\n        start: moment().subtract(1, 'year').startOf('year'),\n        end: moment().subtract(1, 'year').endOf('year')\n      }],\n      callback: function callback() {\n        var start = new Date(this.start_date).getTime();\n        var end = new Date(this.end_date).getTime();\n        var actualEnd = start === end ? end + ONE_DAY_IN_MS - 1 : end;\n        refine([start, actualEnd]);\n      }\n    });\n  });\n  var dateRangeWidget = datePicker({\n    attributeName: 'date'\n  });\n  search.addWidget(dateRangeWidget);\n}\n\nsearch.addWidget(instantsearch.widgets.searchBox({\n  container: \"#search-input\",\n  placeholder: window.searchInputText || \"Search\"\n}));\nsearch.addWidget(instantsearch.widgets.hits({\n  container: \"#hits\",\n  cssClasses: {\n    root: window.hitsRootClass || \"block\"\n  },\n  templates: {\n    empty: \"No results\",\n    item: window.indexTemplate || defaultTemplate\n  },\n  transformItems: function transformItems(items) {\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var date = new Date(item.date);\n      var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n      var nth = function nth(d) {\n        if (d > 3 && d < 21) return 'th';\n\n        switch (d % 10) {\n          case 1:\n            return \"st\";\n\n          case 2:\n            return \"nd\";\n\n          case 3:\n            return \"rd\";\n\n          default:\n            return \"th\";\n        }\n      };\n\n      var year = date.getFullYear();\n      var month = months[date.getMonth()];\n      var day = date.getDate();\n      item.formattedDate = month + \" \" + day + nth(day) + \", \" + year;\n      items[i] = item;\n    }\n\n    return items;\n  }\n})); // 1. Create a render function\n\nvar renderPagination = function renderPagination(renderOptions, isFirstRender) {\n  var container = document.querySelector('#bottom-pagination');\n  var pages = renderOptions.pages,\n      currentRefinement = renderOptions.currentRefinement,\n      nbPages = renderOptions.nbPages,\n      refine = renderOptions.refine;\n\n  if (nbPages > 1 && nbPages <= 7) {\n    var previous = \"<li><a class=\\\"prev \".concat(currentRefinement > 0 ? '' : 'disabled', \"\\\" href=\\\"#\\\" data-value=\\\"\").concat(currentRefinement - 1, \"\\\">Previous</a></li>\");\n    var next = \"<li><a class=\\\"next \".concat(currentRefinement < nbPages - 1 ? '' : 'disabled', \"\\\" href=\\\"#\\\" data-value=\\\"\").concat(currentRefinement + 1, \"\\\">Next</a></li>\");\n\n    var _pages = _toConsumableArray(Array(nbPages).keys());\n\n    ;\n    container.innerHTML = \"\\n      <ul class=\\\"pagination\\\">\\n        \".concat(previous, \"\\n        \").concat(_pages.map(function (page) {\n      return \"<li><a class=\\\"page \".concat(currentRefinement === page ? 'page-active' : '', \"\\\" href=\\\"#\\\" data-value=\\\"\").concat(page, \"\\\">\").concat(page + 1, \"</a></li>\");\n    }).join(''), \"\\n        \").concat(next, \"\\n      </ul>\\n    \");\n\n    _toConsumableArray(container.querySelectorAll('a')).forEach(function (element) {\n      element.addEventListener('click', function (event) {\n        event.preventDefault();\n        refine(event.currentTarget.dataset.value);\n      });\n    });\n  } else if (nbPages > 1 && nbPages > 7) {\n    var _previous = \"<li><a class=\\\"prev \".concat(currentRefinement > 0 ? '' : 'disabled', \"\\\" href=\\\"#\\\" data-value=\\\"\").concat(currentRefinement - 1, \"\\\">Previous</a></li>\");\n\n    var _next = \"<li><a class=\\\"next \".concat(currentRefinement < nbPages - 1 ? '' : 'disabled', \"\\\" href=\\\"#\\\" data-value=\\\"\").concat(currentRefinement + 1, \"\\\">Next</a></li>\");\n\n    var first = pages.includes(0) ? '' : \"<li><a class=\\\"page\\\" href=\\\"#\\\" data-value=\\\"0\\\">1</a></li><li>...</li>\";\n    var last = pages.includes(nbPages - 1) ? '' : \"<li>...</li><li><a class=\\\"page\\\" href=\\\"#\\\" data-value=\\\"\".concat(nbPages - 1, \"\\\">\").concat(nbPages, \"</a></li>\");\n    container.innerHTML = \"\\n      <ul class=\\\"pagination\\\">\\n        \".concat(_previous, \"\\n        \").concat(first, \"\\n        \").concat(pages.map(function (page) {\n      return \"<li><a class=\\\"page \".concat(currentRefinement === page ? 'page-active' : '', \"\\\" href=\\\"#\\\" data-value=\\\"\").concat(page, \"\\\">\").concat(page + 1, \"</a></li>\");\n    }).join(''), \"\\n        \").concat(last, \"\\n        \").concat(_next, \"\\n      </ul>\\n    \");\n\n    _toConsumableArray(container.querySelectorAll('a')).forEach(function (element) {\n      element.addEventListener('click', function (event) {\n        event.preventDefault();\n        refine(event.currentTarget.dataset.value);\n      });\n    });\n  } else {\n    container.innerHTML = '';\n  }\n}; // 2. Create the custom widget\n\n\nvar customPagination = instantsearch.connectors.connectPagination(renderPagination); // 3. Instantiate\n\nsearch.addWidgets([customPagination({\n  padding: 2\n})]);\nsearch.start();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/algoliafilter.js\n");

/***/ }),

/***/ 1:
/*!***************************************!*\
  !*** multi ./src/js/algoliafilter.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Applications/MAMP/htdocs/oaklandca/src/js/algoliafilter.js */"./src/js/algoliafilter.js");


/***/ })

},[[1,"/js/manifest"]]]);